name: Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
  check-version:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.set-outputs.outputs.publish-version }}
      is-release: ${{ steps.set-outputs.outputs.is-release }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Check version to publish and whether to make a release
        id: check-version
        uses: ./.github/actions/check-version
      - name: Set outputs
        id: set-outputs
        run: |
          echo "::set-output name=publish-version::${{ steps.check-version.outputs.publish-version }}"
          echo "::set-output name=is-release::${{ steps.check-version.outputs.is-release }}"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
 
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
 
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
 
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
 
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - check-version
    outputs:
      image-name: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.check-version.outputs.publish-version }}
          flavor: |
            latest=false

      - name: Build and publish docker image
        if: needs.check-version.outputs.publish-version != ''
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ci/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
      - check-version
      - publish
    env:
      RUST_TEST_THREADS: 1
      TEST_CONFIG: localhost
      DOCKER_IMAGE_DRIVER_DID_SOV: ${{ needs.publish.outputs.image-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup Cargo cache
        uses: ./.github/actions/setup-cargo-cache

      - name: Start services
        uses: ./.github/actions/start-services
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Collect docker logs on failure
        if: failure()
        uses: ./.github/actions/upload-docker-logs
        with:
          name: docker-services-${{ github.job }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - check-version
    env:
      PUBLISH_VERSION: ${{needs.check-version.outputs.publish-version}}
      IS_RELEASE: ${{needs.check-version.outputs.is-release}}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Create a new release
        uses: actions/create-release@v1
        if: ${{ needs.check-version.outputs.is-release == 'true'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version.outputs.publish-version }}
          release_name: Release ${{ needs.check-version.outputs.publish-version }}
